service: comfy

provider:
  name: aws
  runtime: nodejs4.3

functions:

## PROJECTS

  projectCreate:
    handler: handler.projects.create
    description: Create a new project
    events:
      - http:
          method: POST
          integration: lambda
          path: projects
          cors: true

  projectUpdate:
    handler: handler.projects.update
    description: Rename a project
    events:
      - http:
          method: PUT
          integration: lambda
          path: projects/{id}
          cors: true
          request:
            parameters:
              paths:
                id: true

  projectRemove:
    handler: handler.projects.remove
    description: Delete a project
    events:
      - http:
          method: DELETE
          integration: lambda
          path: projects/{id}
          cors: true
          request:
            parameters:
              paths:
                id: true

## ENVIRONMENTS

  environmentGet:
    handler: handler.environments.get
    description: List environments of a project
    events:
      - http:
          method: GET
          integration: lambda
          path: projects/{id}/environments
          cors: true
          request:
            parameters:
              paths:
                id: true

  environmentCreate:
    handler: handler.environments.create
    description: Add a new environment to a project
    events:
      - http:
          method: POST
          integration: lambda
          path: projects/{id}/environments
          cors: true
          request:
            parameters:
              paths:
                id: true

  environmentUpdate:
    handler: handler.environments.update
    description: Rename environment of a project
    events:
      - http:
          method: PUT
          integration: lambda
          path: projects/{id}/environments/{environmentName}
          cors: true
          request:
            parameters:
              paths:
                id: true
                environmentName: true

  environmentRemove:
    handler: handler.projects.remove
    description: Delete environment of a project
    events:
      - http:
          method: DELETE
          integration: lambda
          path: projects/{id}/environments/{environmentName}
          cors: true
          request:
            parameters:
              paths:
                id: true
                environmentName: true

## CONFIGURATIONS

  configurationHistory:
    handler: handler.configurations.history
    description: List history of a configuration
    events:
      - http:
          method: GET
          integration: lambda
          path: projects/{id}/environments/{environmentName}/config/{configName}
          cors: true
          request:
            parameters:
              paths:
                id: true
                environmentName: true
                configName: true

  configurationGet:
    handler: handler.configurations.get
    description: Get tag version of a configuration
    events:
      - http:
          method: GET
          integration: lambda
          path: projects/{id}/environments/{environmentName}/config/{configName}/{tagName}
          cors: true
          request:
            parameters:
              paths:
                id: true
                environmentName: true
                configName: true
                tagName: true

  configurationAdd:
    handler: handler.configurations.add
    description: Add a new version of a configuration
    events:
      - http:
          method: POST
          integration: lambda
          path: projects/{id}/environments/{environmentName}/config/{configName}/{tagName}
          cors: true
          request:
            parameters:
              paths:
                id: true
                environmentName: true
                configName: true
                tagName: true

  configurationRemove:
    handler: handler.configurations.remove
    description: Remove a configuration
    events:
      - http:
          method: POST
          integration: lambda
          path: projects/{id}/environments/{environmentName}/config/{configName}
          cors: true
          request:
            parameters:
              paths:
                id: true
                environmentName: true
                configName: true

plugins:
  - serverless-webpack
  - serverless-offline
custom:
  webpack: ./webpack.config.babel.js
  webpackIncludeModules: true # enable auto-packing of external modules
  serverless-offline:
    babelOptions:
      presets: ["es2015-node4", "es2016"]
      plugins: ["add-module-exports", "transform-runtime"]
